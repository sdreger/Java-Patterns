Концепции ООП:
    1. Абстракция.
    2. Инкапсуляция.
    3. Полиморфизм.
    4. Наследование.

Принципы:
    1. Инкупсулируйте то, что изменяется.
    2. Отдавайте предпочтение композиции перед наследованием.
    3. Программируйте на уровне интерфейсов а не реализации.
    4. Стремитесь к слабой связанности взаимодействующих объектов.
    5. Классы должны быть открыты для расширения, но закрыты для изменения (OCP - Open/closed principle).
    6. Код должен зависеть от абстракций, а не от конкретных классов (DIP - Dependency inversion principle).

    SOLID это аббревиатура пяти основных принципов дизайна классов в объектно-ориентированном проектировании —
    Single responsibility, Open-closed, Liskov substitution, Interface segregation и Dependency inversion.

1. Паттерн "Стратегия" - определяет семейство алгоритмов, инкапсулирует и обеспечивает их взаимозаменяемость.
   Паттерн позволяет модифицировать алгоритмы независимо от их использования на стороне клиента.

2. Паттерн "Наблюдатель" - оределяет отношение "один-ко-многим" между объектами таким образом, что при
   изменении состояния одного объекта происходит автоматическое оповещение и обновление всех зависимых объектов.

3. Паттерн "Декоратор" - динамически наделяет объект новыми возможностями
   и явдяется гибкой альтернативой субклассированию в области расширения функциональности.

4. Паттерн "Фабричный метод" - определяет интерфейс создания объекта,
   но позволяет субклассам выбирать создаваемый экземпляр.

5. Паттерн "Абстрактная фабрика" - предоставляет интерфейс для создания семейств взаимосвязанных объектов
   без указания их конкретных классов.